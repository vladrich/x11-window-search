#!/usr/bin/env -S ruby --disable-gems
# coding: utf-8
# frozen_string_literal: true

require 'yaml'
require 'json'
require 'optparse'
require 'shellwords'

def options
  default = {
    'dmenu' => { # each key corresponds to a dmenu CL option
      "fn" => "Monospace-10",
      "l" => 8,
      "b" => true,
      "i" => true,
      'selection_hook' => File.join(__dir__, "activate.sh %s"),
      'selection_hook_activation_return_key_only' => false,
    },
    "filter-out" => {
      "name" => [],
      "resource" => [],
      "class" => ['^Fvwm', '!^FvwmIdent$']
    }
  }

  args = options_command_line
  file = options_config_file(args) || {}
  deep_merge default, deep_merge(file, args)
end

def options_command_line
  opt = { "dmenu" => {} }
  OptionParser.new do |o|
    o.on("-c path", "an alternative path to conf.yaml") { |v| opt["conf"] = v }
    o.on('-d', 'list windows from the current desktop only') { opt['this_desk_only'] = true }
    o.on("-r", "switch to a window only when <Return> is pressed") do
      opt['dmenu']['selection_hook_activation_return_key_only'] = true
    end
  end.parse!
  opt
end

def options_config_file opt
  file = opt["conf"] || -> do
    xdg_config_home = ENV['XDG_CONFIG_HOME'] || File.expand_path('~/.config')
    File.join xdg_config_home, 'fvwm-window-search', 'conf.yaml'
  end.call
  r = File.read file rescue nil
  YAML.safe_load(r, filename: file) rescue abort "invalid config: #{$!}" if r
end

def deep_merge first, second
  merger = proc {|_,v1,v2| Hash === v1 && Hash === v2 ? v1.merge(v2, &merger) : v2 }
  first.merge(second, &merger)
end

def helper exe; File.join(__dir__, "_out/#{exe}"); end

def dmenu_cmd params
  [helper('dmenu/dmenu')] + params.map do |k,v|
    k = "-"+k
    if !!v == v
      v ? k : nil
    else
      [k,v]
    end
  end.reject(&:nil?).flatten.map(&:to_s)
end

def desired patterns, window
  match = -> (type, value) {
    include = patterns[type].select {|v| v[0] != '!'}
    exclude = patterns[type].select {|v| v[0] == '!'}.map {|v| v[1..-1]}

    exclude.each do |pattern|
      return true if value.match pattern
    end
    include.each do |pattern|
      return false if value.match pattern
    end
    true
  }

  match.call("class", window['class']) &&
    match.call("resource", window['resource']) &&
    match.call("name", window['name'])
end

def dmenu_max_text_len opt
  cmd = "#{helper('fontinfo')} #{opt['dmenu']['fn'].shellescape} '@'"
  desk_width, char_width = `#{cmd}`.split.map(&:to_i)
  (desk_width - char_width*2) / char_width
end

def menu_line max_len, desk_indicator, w
  desk = w['desk'] == -1 ? '*' : w['desk'].to_s
  desktop = desk_indicator + desk
  id = '0x'+w['id'].to_s(16)

  c = ->(s, len) { s.size > len ? s[0...len-1] + '…' : s }

  name_width = max_len - 4 - 10 - 10 - 9 - 4*3

  "%-4s | %10s | %-#{name_width}s | %10s | %9s" % [
    desktop,
    c.call(w['class'], 10),
    c.call(w['name'], name_width),
    c.call(w['host'], 10),
    c.call(id, 9)
  ]
end

def main
  opt = options
  pp opt if $DEBUG

  max_len = dmenu_max_text_len opt
  dmenu = IO.popen(dmenu_cmd(opt['dmenu']), 'r+')

  IO.popen(helper('winlist')).each_line do |line|
    begin
      w = JSON.parse line
    rescue
      dmenu.puts $!.to_s.gsub(/\n+/m, ' ') # let a user see an error
      next
    end

    if opt['this_desk_only']
      next unless w['desk_cur']
      desk_indicator = ''
    else
      desk_indicator = w['desk_cur'] ? '→ ' : '  '
    end

    next unless desired opt['filter-out'], w

    dmenu.puts menu_line(max_len, desk_indicator, w)
  end

  dmenu.close
end

# not __FILE__ == $0, for $0 points to a generated stub after `gem install ...`
main unless defined? Minitest
